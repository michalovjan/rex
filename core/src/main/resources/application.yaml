scheduler:
  baseUrl: ${BASE_URL}
  name: rex-${quarkus.uuid}
  options:
    task-configuration:
      clean: true
      default-concurrency: 5
    internal-retry-policy:
      delay: 100
      jitter: 80
      max-retries: 15
      abort-on:
        - jakarta.validation.ConstraintViolationException
        - org.jboss.pnc.rex.common.exceptions.TaskMissingException
        - org.jboss.pnc.rex.common.exceptions.BadRequestException
        - org.jboss.pnc.rex.common.exceptions.TaskConflictException
        - org.jboss.pnc.rex.common.exceptions.CircularDependencyException
        - org.jboss.pnc.rex.common.exceptions.ConstraintConflictException
    http-configuration:
      idle-timeout: 5m # 5 minutes
      follow-redirects: true
      request-retry-policy:
        backoff:
          min-delay: 0ms
          max-delay: 0ms
          jitter-factor: 0.5
        max-retries: 0
        expire-in: 0
      425-backoff-policy:
        backoff:
          min-delay: 200ms
          max-delay: 1m # 1 minute
          jitter-factor: 0.5
        max-retries: 0
        expire-in: 10m # 10minutes

quarkus:
  application:
    name: rex
  otel:
    enabled: true
    traces:
      enabled: true
      exporter: cdi
      # reflect sampling on collector
      resource-attributes: "sampler_ratio=0.05,service.name=rex"
      sampler:
        ratio: 0.05
  # Avoid blocking eventloop if Keycloak is slow to respond
  smallrye-jwt:
    blocking-authentication: true
  package:
    type: fast-jar

  http:
    cors:
      ~: true
      origins: "/.*/"

    port: 80

  oidc:
    enabled: true
    auth-server-url: https://keycloak.com/auth/realms/quarkus
    client-id: client
    credentials:
      secret: secret
    application-type: SERVICE
    tls:
      verification: none
  oidc-client:
    enabled: true
    auth-server-url: https://keycloak.com/auth/realms/quarkus
    client-id: client
    credentials:
      secret: secret

  infinispan-client:
#    hosts: ${ISPN_NODE}
    use-schema-registration: false
    use-auth: true
    username: ${ISPN_USER}
    password: ${ISPN_PASS}
    near-cache-max-entries: 100

  swagger-ui:
    always-include: true
  smallrye-openapi:
    store-schema-directory: src/main/resources/META-INF

  log:
    console:
      format: "%d{yyyy-MM-dd HH:mm:ss,SSS} %-5p [%c{3.}] (%t) %s%e%n"
      json:
        ~: false
        exception-output-type: formatted
    category:
      "org.jboss.pnc":
        level: DEBUG
      "com.arjuna.ats.jta":
        # Set to WARN if you want to see all the exceptions
        level: ERROR
    min-level: TRACE

  vertx:
    max-event-loop-execute-time: 10s

mp:
  openapi:
    extensions:
      smallrye:
        operationIdStrategy: METHOD

org:
  jboss:
    pnc:
      rex:
        core:
          delegates:
            TolerantQueueManager/poke/Retry/maxRetries: ${scheduler.options.internal-retry-policy.max-retries}
            TolerantQueueManager/poke/Retry/delay: ${scheduler.options.internal-retry-policy.delay}
            TolerantQueueManager/poke/Retry/jitter: ${scheduler.options.internal-retry-policy.jitter}
            TolerantQueueManager/poke/Retry/abortOn: ${scheduler.options.internal-retry-policy.abort-on}
            TolerantQueueManager/decreaseRunningCounter/Retry/maxRetries: ${scheduler.options.internal-retry-policy.max-retries}
            TolerantQueueManager/decreaseRunningCounter/Retry/delay: ${scheduler.options.internal-retry-policy.delay}
            TolerantQueueManager/decreaseRunningCounter/Retry/jitter: ${scheduler.options.internal-retry-policy.jitter}
            TolerantQueueManager/decreaseRunningCounter/Retry/abortOn: ${scheduler.options.internal-retry-policy.abort-on}
            TolerantQueueManager/setMaximumConcurrency/Retry/maxRetries: ${scheduler.options.internal-retry-policy.max-retries}
            TolerantQueueManager/setMaximumConcurrency/Retry/delay: ${scheduler.options.internal-retry-policy.delay}
            TolerantQueueManager/setMaximumConcurrency/Retry/jitter: ${scheduler.options.internal-retry-policy.jitter}
            TolerantQueueManager/setMaximumConcurrency/Retry/abortOn: ${scheduler.options.internal-retry-policy.abort-on}
            TolerantQueueManager/getMaximumConcurrency/Retry/maxRetries: ${scheduler.options.internal-retry-policy.max-retries}
            TolerantQueueManager/getMaximumConcurrency/Retry/delay: ${scheduler.options.internal-retry-policy.delay}
            TolerantQueueManager/getMaximumConcurrency/Retry/jitter: ${scheduler.options.internal-retry-policy.jitter}
            TolerantQueueManager/getMaximumConcurrency/Retry/abortOn: ${scheduler.options.internal-retry-policy.abort-on}
            TolerantQueueManager/synchronizeRunningCounter/Retry/maxRetries: ${scheduler.options.internal-retry-policy.max-retries}
            TolerantQueueManager/synchronizeRunningCounter/Retry/delay: ${scheduler.options.internal-retry-policy.delay}
            TolerantQueueManager/synchronizeRunningCounter/Retry/jitter: ${scheduler.options.internal-retry-policy.jitter}
            TolerantQueueManager/synchronizeRunningCounter/Retry/abortOn: ${scheduler.options.internal-retry-policy.abort-on}
            TolerantQueueManager/getRunningCounter/Retry/maxRetries: ${scheduler.options.internal-retry-policy.max-retries}
            TolerantQueueManager/getRunningCounter/Retry/delay: ${scheduler.options.internal-retry-policy.delay}
            TolerantQueueManager/getRunningCounter/Retry/jitter: ${scheduler.options.internal-retry-policy.jitter}
            TolerantQueueManager/getRunningCounter/Retry/abortOn: ${scheduler.options.internal-retry-policy.abort-on}
            TolerantCleaningManager/tryClean/Retry/maxRetries: ${scheduler.options.internal-retry-policy.max-retries}
            TolerantCleaningManager/tryClean/Retry/delay: ${scheduler.options.internal-retry-policy.delay}
            TolerantCleaningManager/tryClean/Retry/jitter: ${scheduler.options.internal-retry-policy.jitter}
            TolerantCleaningManager/tryClean/Retry/abortOn: ${scheduler.options.internal-retry-policy.abort-on}
            FaultToleranceDecorator/withTolerance/Retry/maxRetries: ${scheduler.options.internal-retry-policy.max-retries}
            FaultToleranceDecorator/withTolerance/Retry/delay: ${scheduler.options.internal-retry-policy.delay}
            FaultToleranceDecorator/withTolerance/Retry/jitter: ${scheduler.options.internal-retry-policy.jitter}
            FaultToleranceDecorator/withTolerance/Retry/abortOn: ${scheduler.options.internal-retry-policy.abort-on}
        rest:
          CallbackEndpointImpl/finish/Retry/maxRetries: ${scheduler.options.internal-retry-policy.max-retries}
          CallbackEndpointImpl/finish/Retry/delay: ${scheduler.options.internal-retry-policy.delay}
          CallbackEndpointImpl/finish/Retry/jitter: ${scheduler.options.internal-retry-policy.jitter}
          CallbackEndpointImpl/finish/Retry/abortOn: ${scheduler.options.internal-retry-policy.abort-on}
          CallbackEndpointImpl/succeed/Retry/maxRetries: ${scheduler.options.internal-retry-policy.max-retries}
          CallbackEndpointImpl/succeed/Retry/delay: ${scheduler.options.internal-retry-policy.delay}
          CallbackEndpointImpl/succeed/Retry/jitter: ${scheduler.options.internal-retry-policy.jitter}
          CallbackEndpointImpl/succeed/Retry/abortOn: ${scheduler.options.internal-retry-policy.abort-on}
          CallbackEndpointImpl/fail/Retry/maxRetries: ${scheduler.options.internal-retry-policy.max-retries}
          CallbackEndpointImpl/fail/Retry/delay: ${scheduler.options.internal-retry-policy.delay}
          CallbackEndpointImpl/fail/Retry/jitter: ${scheduler.options.internal-retry-policy.jitter}
          CallbackEndpointImpl/fail/Retry/abortOn: ${scheduler.options.internal-retry-policy.abort-on}
          QueueEndpointImpl/setConcurrent/Retry/maxRetries: ${scheduler.options.internal-retry-policy.max-retries}
          QueueEndpointImpl/setConcurrent/Retry/delay: ${scheduler.options.internal-retry-policy.delay}
          QueueEndpointImpl/setConcurrent/Retry/jitter: ${scheduler.options.internal-retry-policy.jitter}
          QueueEndpointImpl/setConcurrent/Retry/abortOn: ${scheduler.options.internal-retry-policy.abort-on}
          TaskEndpointImpl/start/Retry/maxRetries: ${scheduler.options.internal-retry-policy.max-retries}
          TaskEndpointImpl/start/Retry/delay: ${scheduler.options.internal-retry-policy.delay}
          TaskEndpointImpl/start/Retry/jitter: ${scheduler.options.internal-retry-policy.jitter}
          TaskEndpointImpl/start/Retry/abortOn: ${scheduler.options.internal-retry-policy.abort-on}
          TaskEndpointImpl/cancel/Retry/maxRetries: ${scheduler.options.internal-retry-policy.max-retries}
          TaskEndpointImpl/cancel/Retry/delay: ${scheduler.options.internal-retry-policy.delay}
          TaskEndpointImpl/cancel/Retry/jitter: ${scheduler.options.internal-retry-policy.jitter}
          TaskEndpointImpl/cancel/Retry/abortOn: ${scheduler.options.internal-retry-policy.abort-on}
          MaintenanceEndpointImpl/clearAll/Retry/maxRetries: ${scheduler.options.internal-retry-policy.max-retries}
          MaintenanceEndpointImpl/clearAll/Retry/delay: ${scheduler.options.internal-retry-policy.delay}
          MaintenanceEndpointImpl/clearAll/Retry/jitter: ${scheduler.options.internal-retry-policy.jitter}
          MaintenanceEndpointImpl/clearAll/Retry/abortOn: ${scheduler.options.internal-retry-policy.abort-on}